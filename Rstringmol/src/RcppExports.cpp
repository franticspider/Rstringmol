// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// timesTwelve
NumericVector timesTwelve(NumericVector x);
RcppExport SEXP _Rstringmol_timesTwelve(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwelve(x));
    return rcpp_result_gen;
END_RCPP
}
// mtrand
double mtrand();
RcppExport SEXP _Rstringmol_mtrand() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mtrand());
    return rcpp_result_gen;
END_RCPP
}
// doComplement
Rcpp::String doComplement(Rcpp::String input, bool verbose);
RcppExport SEXP _Rstringmol_doComplement(SEXP inputSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type input(inputSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(doComplement(input, verbose));
    return rcpp_result_gen;
END_RCPP
}
// doSWAlign
List doSWAlign(Rcpp::StringVector seqVector, bool strip, bool verbose);
RcppExport SEXP _Rstringmol_doSWAlign(SEXP seqVectorSEXP, SEXP stripSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seqVector(seqVectorSEXP);
    Rcpp::traits::input_parameter< bool >::type strip(stripSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(doSWAlign(seqVector, strip, verbose));
    return rcpp_result_gen;
END_RCPP
}
// doReaction
List doReaction(Rcpp::StringVector seqVector, bool verbose, const int climit);
RcppExport SEXP _Rstringmol_doReaction(SEXP seqVectorSEXP, SEXP verboseSEXP, SEXP climitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seqVector(seqVectorSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type climit(climitSEXP);
    rcpp_result_gen = Rcpp::wrap(doReaction(seqVector, verbose, climit));
    return rcpp_result_gen;
END_RCPP
}
// doReactionFP
void doReactionFP(Rcpp::StringVector seqVector, Rcpp::StringVector fnVector, bool verbose);
RcppExport SEXP _Rstringmol_doReactionFP(SEXP seqVectorSEXP, SEXP fnVectorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seqVector(seqVectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type fnVector(fnVectorSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    doReactionFP(seqVector, fnVector, verbose);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rstringmol_timesTwelve", (DL_FUNC) &_Rstringmol_timesTwelve, 1},
    {"_Rstringmol_mtrand", (DL_FUNC) &_Rstringmol_mtrand, 0},
    {"_Rstringmol_doComplement", (DL_FUNC) &_Rstringmol_doComplement, 2},
    {"_Rstringmol_doSWAlign", (DL_FUNC) &_Rstringmol_doSWAlign, 3},
    {"_Rstringmol_doReaction", (DL_FUNC) &_Rstringmol_doReaction, 3},
    {"_Rstringmol_doReactionFP", (DL_FUNC) &_Rstringmol_doReactionFP, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rstringmol(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
